{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to CUC ACM-Wiki\uff01 \u00b6 \u7f51\u7ad9\u5efa\u8bbe \u00b6 \u7f51\u7ad9\u4eff\u7167 OI-Wiki \u57fa\u4e8e mkdocs \u8bbe\u8ba1\uff0c\u7528\u4e8e\u5b66\u4e60\u7b97\u6cd5\u7ade\u8d5b\u76f8\u5173\u7684\u5185\u5bb9\u3002\u652f\u6301 markdown \u548c LaTeX \u8bed\u6cd5\u3002 \u672c\u9879\u76ee\u6258\u7ba1\u5728GitHub\u7684 repo \u4e2d\uff0c\u7531Travis\u81ea\u52a8\u90e8\u7f72\u3002 master \u5206\u652f\u4e0b\u4e3a\u76f8\u5173\u6587\u6863\uff0c gh-page \u5206\u652f\u4e0b\u4e3a\u7f51\u9875\u3002 \u79fb\u52a8\u7aef \u00b6 \u624b\u673a\u79fb\u52a8\u7aef\u76ee\u5f55\u6811\u5728\u5de6\u4e0a\u89d2\uff0c\u4e5f\u53ef\u5728\u53f3\u4e0b\u89d2\u7ffb\u9875\u3002 \u5982\u4f55\u53c2\u4e0e \u00b6 \u5982\u679c\u60a8\u6709\u610f\u5411\u53c2\u4e0e\u8d21\u732e\uff0c\u5e76\u5728\u4ed3\u5e93 master \u5206\u652f /docs \u76ee\u5f55\u4e0b\u6dfb\u52a0 markdown\u6587\u4ef6\uff0c\u5e76\u5728 mkdocs.yml \u6587\u4ef6\u5185\u5bb9\u91cc\u589e\u52a0\u76f8\u5e94\u7684\u9875\u9762\u3002\u7136\u540e pull request \u5c31\u53ef\u4ee5\u4e86\u3002\u8bf7\u5728 commit message \u5927\u81f4\u8bf4\u660e\u8fdb\u884c\u4e86\u54ea\u4e9b\u64cd\u4f5c\u3002 \u6587\u6863\u5b58\u50a8\u683c\u5f0f \u00b6 \u6587\u4ef6\u540d\u8bf7\u52a1\u5fc5\u90fd\u5c0f\u5199\uff0c\u4ee5 - \u5206\u5272\uff0c\u5982 file-name \u3002 \u8bf7\u52a1\u5fc5\u786e\u4fdd\u60a8\u7684\u6587\u6863\u4e2d\u5f15\u7528\u7684 \u5916\u94fe \u56fe\u7247\u5df2\u7ecf\u5168\u90e8\u8f6c\u5b58\u5230\u4e86 \u672c\u5e93\u5185 \u5bf9\u5e94\u7684 img \u6587\u4ef6\u5939\u4e2d\uff0c\u5efa\u8bae\u5904\u7406\u6210 MD \u6587\u6863\u540d\u79f0 + \u7f16\u53f7 \u7684\u5f62\u5f0f\uff1b\uff08\u5373\u683c\u5f0f\u4e3a ![\u63cf\u8ff0\u4fe1\u606f](img/example-1.jpg) \uff09\u3002 \u8054\u7cfb\u65b9\u5f0f \u00b6 Issue / QQ: 3208413453","title":"\u5173\u4e8e\u672c\u9879\u76ee"},{"location":"#welcome-to-cuc-acm-wiki","text":"","title":"Welcome to CUC ACM-Wiki\uff01"},{"location":"#_1","text":"\u7f51\u7ad9\u4eff\u7167 OI-Wiki \u57fa\u4e8e mkdocs \u8bbe\u8ba1\uff0c\u7528\u4e8e\u5b66\u4e60\u7b97\u6cd5\u7ade\u8d5b\u76f8\u5173\u7684\u5185\u5bb9\u3002\u652f\u6301 markdown \u548c LaTeX \u8bed\u6cd5\u3002 \u672c\u9879\u76ee\u6258\u7ba1\u5728GitHub\u7684 repo \u4e2d\uff0c\u7531Travis\u81ea\u52a8\u90e8\u7f72\u3002 master \u5206\u652f\u4e0b\u4e3a\u76f8\u5173\u6587\u6863\uff0c gh-page \u5206\u652f\u4e0b\u4e3a\u7f51\u9875\u3002","title":"\u7f51\u7ad9\u5efa\u8bbe"},{"location":"#_2","text":"\u624b\u673a\u79fb\u52a8\u7aef\u76ee\u5f55\u6811\u5728\u5de6\u4e0a\u89d2\uff0c\u4e5f\u53ef\u5728\u53f3\u4e0b\u89d2\u7ffb\u9875\u3002","title":"\u79fb\u52a8\u7aef"},{"location":"#_3","text":"\u5982\u679c\u60a8\u6709\u610f\u5411\u53c2\u4e0e\u8d21\u732e\uff0c\u5e76\u5728\u4ed3\u5e93 master \u5206\u652f /docs \u76ee\u5f55\u4e0b\u6dfb\u52a0 markdown\u6587\u4ef6\uff0c\u5e76\u5728 mkdocs.yml \u6587\u4ef6\u5185\u5bb9\u91cc\u589e\u52a0\u76f8\u5e94\u7684\u9875\u9762\u3002\u7136\u540e pull request \u5c31\u53ef\u4ee5\u4e86\u3002\u8bf7\u5728 commit message \u5927\u81f4\u8bf4\u660e\u8fdb\u884c\u4e86\u54ea\u4e9b\u64cd\u4f5c\u3002","title":"\u5982\u4f55\u53c2\u4e0e"},{"location":"#_4","text":"\u6587\u4ef6\u540d\u8bf7\u52a1\u5fc5\u90fd\u5c0f\u5199\uff0c\u4ee5 - \u5206\u5272\uff0c\u5982 file-name \u3002 \u8bf7\u52a1\u5fc5\u786e\u4fdd\u60a8\u7684\u6587\u6863\u4e2d\u5f15\u7528\u7684 \u5916\u94fe \u56fe\u7247\u5df2\u7ecf\u5168\u90e8\u8f6c\u5b58\u5230\u4e86 \u672c\u5e93\u5185 \u5bf9\u5e94\u7684 img \u6587\u4ef6\u5939\u4e2d\uff0c\u5efa\u8bae\u5904\u7406\u6210 MD \u6587\u6863\u540d\u79f0 + \u7f16\u53f7 \u7684\u5f62\u5f0f\uff1b\uff08\u5373\u683c\u5f0f\u4e3a ![\u63cf\u8ff0\u4fe1\u606f](img/example-1.jpg) \uff09\u3002","title":"\u6587\u6863\u5b58\u50a8\u683c\u5f0f"},{"location":"#_5","text":"Issue / QQ: 3208413453","title":"\u8054\u7cfb\u65b9\u5f0f"},{"location":"2020Spring/","text":"\u4f7f\u7528\u5e73\u53f0 \u00b6 \u505a\u9898\u4ecd\u4f7f\u7528 Virtual Judge \uff0c\u8bad\u7ec3\u540d\u79f0\u524d\u7f00\u4e3a\u201cCUC-2020-Spring Training\u201d\u3002\u79ef\u5206\u89c4\u5219\u540c\u4e0a\u5b66\u671f\u3002 \u6388\u8bfe\u4f7f\u7528 Bilibili \u76f4\u64ad\u6216\u63d0\u524d\u5236\u4f5c\u597d\u89c6\u9891\u4e0a\u4f20\uff0c\u6bcf\u6b21\u4e0a\u8bfe\u524d\u4f1a\u5728QQ\u7fa4\u91cc\u63d0\u524d\u901a\u77e5\u623f\u95f4\u53f7\u6216\u89c6\u9891\u5730\u5740\u3002 \u8bb2\u5e08\u540d\u5355 \u00b6 \u65f6\u95f4 \u5185\u5bb9\u5b89\u6392 \u8bb2\u5e08 \u7b2c1\u5468 2\u670826\u65e5 14:00-18:00 2020\u6625\u5b63\u8bad\u7ec3\u5f00\u8425\u4eea\u5f0f \u9ec4\u73ae \u8001\u5e08 \u5468\u4e09 2\u670826\u65e5 14:00-18:00 \u65f6\u95f4\u590d\u6742\u5ea6\u3001\u7a7a\u95f4\u590d\u6742\u5ea6\u3001\u7ed3\u6784\u4f53\u3001\u9ad8\u7cbe\u5ea6\u8fd0\u7b97\u3001INT128\u3001sort\u7684\u5e94\u7528 \u738b\u660e\u6708/\u5415\u4e5d\u6d0b \u5468\u516d 2\u670829\u65e5 14:00-18:00 STL\u7b80\u5355\u7ed3\u6784\u548c\u7528\u6cd5\uff08map,set,multiset,\u4f18\u5148\u961f\u5217\uff0c\u54c8\u5e0c\u8868\uff09\u3001bitset \u5218\u5b97\u946b \u7b2c2\u5468 3\u67084\u65e5 14:00-18:00 \u5c3a\u53d6\u3001\u4e8c\u5206\u3001STL\u91cc\u7684\u4e8c\u5206\u3001\u500d\u589e \u674e\u6668\u66e6 3\u67087\u65e5 14:00-18:00 \u6811\u548c\u56fe\u7684\u7ed3\u6784\u3001\u5b58\u50a8\u3001\u904d\u5386\u3001\u7b80\u5355\u4ecb\u7ecd\u5e76\u67e5\u96c6 \u738b\u51ac\u971e/\u5b97\u5b50\u94b0 \u7b2c3\u5468 \u6839\u636e\u7f51\u8bfe\u60c5\u51b5\u8c03\u6574 \u6811\u548c\u56fe\u7684DFS\u3001BFS\u3001\u961f\u5217\u3001\u6808\uff08STL\uff09 \u8346\u8587 \u6700\u5c0f\u751f\u6210\u6811\u3001\u6700\u77ed\u8def\u5f84 \u8346\u8587 \u7b2c4\u5468 \u5dee\u5206\u7ea6\u675f\u3001\u4e8c\u5206\u56fe\u3001\u4e8c\u5206\u56fe\u5339\u914d \u9093\u695a\u76df \u62d3\u6251\u6392\u5e8f\u3001\u5f3a\u8fde\u901a\u5206\u91cf \u674e\u7b19\u6da6 \u7b2c5\u5468 LCA\u6700\u8fd1\u516c\u5171\u7956\u5148\u3001\u6811\u4e0a\u5dee\u5206\u3001RMQ \u5218\u9ece\u660e \u56fe\u8bba\u7684\u4e13\u9898\u6bd4\u8d5b \u5b97\u5b50\u94b0 \u7b2c6\u5468 \u80cc\u5305DP\u3001\u6811\u4e0aDP \u9ec4\u5f6a \u72b6\u6001\u538b\u7f29DP\u3001\u533a\u95f4DP \u9ec4\u5f6a \u7b2c7\u5468 \u6570\u4f4dDP\u3001\u6982\u7387DP\u3001\u8ba1\u6570DP \u66f9\u53ef\u610f DP\u7684\u4e13\u9898\u6bd4\u8d5b \u66f9\u53ef\u610f \u7b2c8\u5468 \u6570\u8bba\u4e00 \u8d75\u7d2b\u5982 \u6570\u8bba\u4e8c\u3001\u7ec4\u5408\u6570\u5b66\u3001\u7ecf\u5178\u6570\u5217 \u5415\u4e5d\u6d0b \u7b2c9\u5468 \u535a\u5f08 \u5415\u4e5d\u6d0b \u6570\u5b66\u535a\u5f08\u7684\u4e13\u9898\u6bd4\u8d5b \u8d75\u7d2b\u5982 \u7b2c10\u5468 \u5355\u8c03\u6808\u548c\u5355\u8c03\u961f\u5217\u3001\u5e76\u67e5\u96c6 \u5218\u5b97\u946b \u6811\u72b6\u6570\u7ec4\u3001\u7ebf\u6bb5\u6811\u57fa\u7840 \u63ed\u9752\u83b9 \u7b2c11\u5468 \u7ebf\u6bb5\u6811\u8fdb\u9636 \u9648\u4ed5\u67cf \u70b9\u5206\u6cbb\u3001\u6811\u94fe\u5256\u5206 \u674e\u6668\u66e6 \u63ed\u9752\u83b9 \u7b2c12\u5468 \u53ef\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784 \u63ed\u9752\u83b9 \u6570\u636e\u7ed3\u6784\u4e13\u9898\u6bd4\u8d5b \u9648\u4ed5\u67cf \u7b2c13\u5468 Trie\u3001KMP \u9093\u695a\u76df \u5b57\u7b26\u54c8\u5e0c\u3001\u56de\u6587\u4e32\u3001AC\u81ea\u52a8\u673a \u9093\u695a\u76df \u5b66\u5458\u540d\u5355 \u00b6 \uff08\u6392\u540d\u4e0d\u5206\u5148\u540e\uff09 \u4e13\u4e1a \u59d3\u540d 17\u5e94\u7edf \u6a0a\u73d1 18\u7535\u4fe1 \u7518\u96e8\u5349 18\u8ba1\u79d1 \u9648\u53ef\u60a6 18\u8ba1\u79d1 \u9ad8\u8363\u5d0e 18\u8ba1\u79d1 \u90ed\u66e6\u7428 18\u8ba1\u79d1 \u8bb8\u53ef 18\u8f6f\u5de5 \u5218\u51a0\u5b87 18\u8f6f\u5de5 \u8096\u5b50\u840c 18\u6570\u79d1 \u66fe\u9510 18\u6570\u5a92\u6280 \u9ad8\u5609\u603f 18\u6570\u5a92\u6280 \u674e\u5eb7 18\u6570\u5a92\u6280 \u674e\u7b19\u6da6 18\u6570\u5a92\u6280 \u5b8b\u6cfd\u9716 18\u901a\u4fe1 \u5f20\u5a49\u8398 18\u7f51\u5de5 \u66fe\u7965\u6d69 18\u7f51\u5de5 \u51b7\u6797\u5bcc 18\u4fe1\u5b89 \u9648\u827e\u837b 18\u4fe1\u5b89 \u9ad8\u7545 18\u4fe1\u5b89 \u738b\u6210\u745e 18\u4fe1\u5b89 \u738b\u51ac\u971e 18\u4fe1\u5b89 \u738b\u660e\u6708 18\u4fe1\u5b89 \u4e8e\u68a6\u4e3d 19\u7535\u4fe1 \u8d3a\u9756\u831c 19\u7535\u4fe1 \u738b\u94ed 19\u5e7f\u7535\u5de5 \u675c\u715c 19\u5e7f\u7535\u5de5 \u4e93\u6cfd\u9c81 19\u5e7f\u7535\u5de5 \u9b4f\u671d\u9633 19\u8ba1\u79d1 \u5eb7\u7b71\u6db5 19\u8ba1\u79d1 \u5ed6\u827a\u9896 19\u8ba1\u79d1 \u4ee4\u72d0\u6653\u7389 19\u8ba1\u79d1 \u5218\u8bd7\u539f 19\u8ba1\u79d1 \u5218\u8212\u745c 19\u8ba1\u79d1 \u5218\u601d\u6e90 19\u8ba1\u79d1 \u5218\u5fc6\u8339 19\u8ba1\u79d1 \u8983\u6d0b\u6d0b 19\u8ba1\u79d1 \u5b8b\u6625\u9896 19\u8ba1\u79d1 \u738b\u794e\u7490 19\u8ba1\u79d1 \u8d75\u6da6\u6cfd 19\u8ba1\u79d1 \u5468\u7490\u7476 19\u8ba1\u79d1 \u5de6\u7ee7\u5218\u7545 19\u6570\u79d1 \u6768\u5955\u6b23 19\u6570\u5a92\u6280 \u9ec4\u84c9 19\u6570\u5a92\u6280 \u674e\u7f8e\u83b9 19\u901a\u4fe1 \u6bb5\u5bb6\u5e05 19\u901a\u4fe1 \u4f55\u6b23\u96e8 19\u901a\u4fe1 \u8d3a\u9a9e\u6167 19\u901a\u4fe1 \u84dd\u8fdc\u946b 19\u901a\u4fe1 \u5b5f\u7533 19\u901a\u4fe1 \u8983\u9759\u620e 19\u901a\u4fe1 \u5f20\u5065 19\u7f51\u5de5 \u8d39\u7ea2\u679d 19\u7f51\u5de5 \u5de9\u5b87\u8fb0 19\u7f51\u5de5 \u90ed\u632f\u6210 19\u7f51\u5de5 \u9ec4\u6615\u6b23 19\u7f51\u5de5 \u5e9e\u5b87\u8f69 19\u4fe1\u5b89 \u5f6d\u5b5f\u771f 19\u4fe1\u5b89 \u738b\u67cf\u7fd4 19\u4fe1\u5b89 \u8bb8\u6cfd\u6797 19\u4fe1\u5b89 \u8881\u5b50\u6052 19\u4fe1\u5b89 \u5f20\u534e\u777f 19\u81ea\u52a8\u5316 \u674e\u656c\u8d6b","title":"\u8bfe\u7a0b\u5b89\u6392"},{"location":"2020Spring/#_1","text":"\u505a\u9898\u4ecd\u4f7f\u7528 Virtual Judge \uff0c\u8bad\u7ec3\u540d\u79f0\u524d\u7f00\u4e3a\u201cCUC-2020-Spring Training\u201d\u3002\u79ef\u5206\u89c4\u5219\u540c\u4e0a\u5b66\u671f\u3002 \u6388\u8bfe\u4f7f\u7528 Bilibili \u76f4\u64ad\u6216\u63d0\u524d\u5236\u4f5c\u597d\u89c6\u9891\u4e0a\u4f20\uff0c\u6bcf\u6b21\u4e0a\u8bfe\u524d\u4f1a\u5728QQ\u7fa4\u91cc\u63d0\u524d\u901a\u77e5\u623f\u95f4\u53f7\u6216\u89c6\u9891\u5730\u5740\u3002","title":"\u4f7f\u7528\u5e73\u53f0"},{"location":"2020Spring/#_2","text":"\u65f6\u95f4 \u5185\u5bb9\u5b89\u6392 \u8bb2\u5e08 \u7b2c1\u5468 2\u670826\u65e5 14:00-18:00 2020\u6625\u5b63\u8bad\u7ec3\u5f00\u8425\u4eea\u5f0f \u9ec4\u73ae \u8001\u5e08 \u5468\u4e09 2\u670826\u65e5 14:00-18:00 \u65f6\u95f4\u590d\u6742\u5ea6\u3001\u7a7a\u95f4\u590d\u6742\u5ea6\u3001\u7ed3\u6784\u4f53\u3001\u9ad8\u7cbe\u5ea6\u8fd0\u7b97\u3001INT128\u3001sort\u7684\u5e94\u7528 \u738b\u660e\u6708/\u5415\u4e5d\u6d0b \u5468\u516d 2\u670829\u65e5 14:00-18:00 STL\u7b80\u5355\u7ed3\u6784\u548c\u7528\u6cd5\uff08map,set,multiset,\u4f18\u5148\u961f\u5217\uff0c\u54c8\u5e0c\u8868\uff09\u3001bitset \u5218\u5b97\u946b \u7b2c2\u5468 3\u67084\u65e5 14:00-18:00 \u5c3a\u53d6\u3001\u4e8c\u5206\u3001STL\u91cc\u7684\u4e8c\u5206\u3001\u500d\u589e \u674e\u6668\u66e6 3\u67087\u65e5 14:00-18:00 \u6811\u548c\u56fe\u7684\u7ed3\u6784\u3001\u5b58\u50a8\u3001\u904d\u5386\u3001\u7b80\u5355\u4ecb\u7ecd\u5e76\u67e5\u96c6 \u738b\u51ac\u971e/\u5b97\u5b50\u94b0 \u7b2c3\u5468 \u6839\u636e\u7f51\u8bfe\u60c5\u51b5\u8c03\u6574 \u6811\u548c\u56fe\u7684DFS\u3001BFS\u3001\u961f\u5217\u3001\u6808\uff08STL\uff09 \u8346\u8587 \u6700\u5c0f\u751f\u6210\u6811\u3001\u6700\u77ed\u8def\u5f84 \u8346\u8587 \u7b2c4\u5468 \u5dee\u5206\u7ea6\u675f\u3001\u4e8c\u5206\u56fe\u3001\u4e8c\u5206\u56fe\u5339\u914d \u9093\u695a\u76df \u62d3\u6251\u6392\u5e8f\u3001\u5f3a\u8fde\u901a\u5206\u91cf \u674e\u7b19\u6da6 \u7b2c5\u5468 LCA\u6700\u8fd1\u516c\u5171\u7956\u5148\u3001\u6811\u4e0a\u5dee\u5206\u3001RMQ \u5218\u9ece\u660e \u56fe\u8bba\u7684\u4e13\u9898\u6bd4\u8d5b \u5b97\u5b50\u94b0 \u7b2c6\u5468 \u80cc\u5305DP\u3001\u6811\u4e0aDP \u9ec4\u5f6a \u72b6\u6001\u538b\u7f29DP\u3001\u533a\u95f4DP \u9ec4\u5f6a \u7b2c7\u5468 \u6570\u4f4dDP\u3001\u6982\u7387DP\u3001\u8ba1\u6570DP \u66f9\u53ef\u610f DP\u7684\u4e13\u9898\u6bd4\u8d5b \u66f9\u53ef\u610f \u7b2c8\u5468 \u6570\u8bba\u4e00 \u8d75\u7d2b\u5982 \u6570\u8bba\u4e8c\u3001\u7ec4\u5408\u6570\u5b66\u3001\u7ecf\u5178\u6570\u5217 \u5415\u4e5d\u6d0b \u7b2c9\u5468 \u535a\u5f08 \u5415\u4e5d\u6d0b \u6570\u5b66\u535a\u5f08\u7684\u4e13\u9898\u6bd4\u8d5b \u8d75\u7d2b\u5982 \u7b2c10\u5468 \u5355\u8c03\u6808\u548c\u5355\u8c03\u961f\u5217\u3001\u5e76\u67e5\u96c6 \u5218\u5b97\u946b \u6811\u72b6\u6570\u7ec4\u3001\u7ebf\u6bb5\u6811\u57fa\u7840 \u63ed\u9752\u83b9 \u7b2c11\u5468 \u7ebf\u6bb5\u6811\u8fdb\u9636 \u9648\u4ed5\u67cf \u70b9\u5206\u6cbb\u3001\u6811\u94fe\u5256\u5206 \u674e\u6668\u66e6 \u63ed\u9752\u83b9 \u7b2c12\u5468 \u53ef\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784 \u63ed\u9752\u83b9 \u6570\u636e\u7ed3\u6784\u4e13\u9898\u6bd4\u8d5b \u9648\u4ed5\u67cf \u7b2c13\u5468 Trie\u3001KMP \u9093\u695a\u76df \u5b57\u7b26\u54c8\u5e0c\u3001\u56de\u6587\u4e32\u3001AC\u81ea\u52a8\u673a \u9093\u695a\u76df","title":"\u8bb2\u5e08\u540d\u5355"},{"location":"2020Spring/#_3","text":"\uff08\u6392\u540d\u4e0d\u5206\u5148\u540e\uff09 \u4e13\u4e1a \u59d3\u540d 17\u5e94\u7edf \u6a0a\u73d1 18\u7535\u4fe1 \u7518\u96e8\u5349 18\u8ba1\u79d1 \u9648\u53ef\u60a6 18\u8ba1\u79d1 \u9ad8\u8363\u5d0e 18\u8ba1\u79d1 \u90ed\u66e6\u7428 18\u8ba1\u79d1 \u8bb8\u53ef 18\u8f6f\u5de5 \u5218\u51a0\u5b87 18\u8f6f\u5de5 \u8096\u5b50\u840c 18\u6570\u79d1 \u66fe\u9510 18\u6570\u5a92\u6280 \u9ad8\u5609\u603f 18\u6570\u5a92\u6280 \u674e\u5eb7 18\u6570\u5a92\u6280 \u674e\u7b19\u6da6 18\u6570\u5a92\u6280 \u5b8b\u6cfd\u9716 18\u901a\u4fe1 \u5f20\u5a49\u8398 18\u7f51\u5de5 \u66fe\u7965\u6d69 18\u7f51\u5de5 \u51b7\u6797\u5bcc 18\u4fe1\u5b89 \u9648\u827e\u837b 18\u4fe1\u5b89 \u9ad8\u7545 18\u4fe1\u5b89 \u738b\u6210\u745e 18\u4fe1\u5b89 \u738b\u51ac\u971e 18\u4fe1\u5b89 \u738b\u660e\u6708 18\u4fe1\u5b89 \u4e8e\u68a6\u4e3d 19\u7535\u4fe1 \u8d3a\u9756\u831c 19\u7535\u4fe1 \u738b\u94ed 19\u5e7f\u7535\u5de5 \u675c\u715c 19\u5e7f\u7535\u5de5 \u4e93\u6cfd\u9c81 19\u5e7f\u7535\u5de5 \u9b4f\u671d\u9633 19\u8ba1\u79d1 \u5eb7\u7b71\u6db5 19\u8ba1\u79d1 \u5ed6\u827a\u9896 19\u8ba1\u79d1 \u4ee4\u72d0\u6653\u7389 19\u8ba1\u79d1 \u5218\u8bd7\u539f 19\u8ba1\u79d1 \u5218\u8212\u745c 19\u8ba1\u79d1 \u5218\u601d\u6e90 19\u8ba1\u79d1 \u5218\u5fc6\u8339 19\u8ba1\u79d1 \u8983\u6d0b\u6d0b 19\u8ba1\u79d1 \u5b8b\u6625\u9896 19\u8ba1\u79d1 \u738b\u794e\u7490 19\u8ba1\u79d1 \u8d75\u6da6\u6cfd 19\u8ba1\u79d1 \u5468\u7490\u7476 19\u8ba1\u79d1 \u5de6\u7ee7\u5218\u7545 19\u6570\u79d1 \u6768\u5955\u6b23 19\u6570\u5a92\u6280 \u9ec4\u84c9 19\u6570\u5a92\u6280 \u674e\u7f8e\u83b9 19\u901a\u4fe1 \u6bb5\u5bb6\u5e05 19\u901a\u4fe1 \u4f55\u6b23\u96e8 19\u901a\u4fe1 \u8d3a\u9a9e\u6167 19\u901a\u4fe1 \u84dd\u8fdc\u946b 19\u901a\u4fe1 \u5b5f\u7533 19\u901a\u4fe1 \u8983\u9759\u620e 19\u901a\u4fe1 \u5f20\u5065 19\u7f51\u5de5 \u8d39\u7ea2\u679d 19\u7f51\u5de5 \u5de9\u5b87\u8fb0 19\u7f51\u5de5 \u90ed\u632f\u6210 19\u7f51\u5de5 \u9ec4\u6615\u6b23 19\u7f51\u5de5 \u5e9e\u5b87\u8f69 19\u4fe1\u5b89 \u5f6d\u5b5f\u771f 19\u4fe1\u5b89 \u738b\u67cf\u7fd4 19\u4fe1\u5b89 \u8bb8\u6cfd\u6797 19\u4fe1\u5b89 \u8881\u5b50\u6052 19\u4fe1\u5b89 \u5f20\u534e\u777f 19\u81ea\u52a8\u5316 \u674e\u656c\u8d6b","title":"\u5b66\u5458\u540d\u5355"},{"location":"FAQ/","text":"F.A.Q \u00b6 \u8fd9\u4e2a\u7f51\u7ad9\u662f\u5e72\u4ec0\u4e48\u7528\u7684\uff1f \u00b6 \u5b66\u4e60\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u76f8\u5173\u5185\u5bb9 \u53d1\u5e03\u4e2d\u56fd\u4f20\u5a92\u5927\u5b66ACM\u96c6\u8bad\u961f\u76f8\u5173\u5b89\u6392 \u4e3a\u4ec0\u4e48\u6211\u8fdb\u884c\u4e86\u4fee\u6539\u4f46\u662f\u7f51\u7ad9\u6ca1\u6709\u53d8\u5316\uff1f \u00b6 \u53ea\u6709 .mkdocs.yml \u5185\u5bb9\u53d1\u751f\u4e86\u6539\u53d8\uff0c\u7f51\u7ad9\u624d\u4f1a\u53d8\u5316\u3002\u5982\u679c\u60a8\u7684\u66f4\u6539\u4e0d\u6d89\u53ca\u7f51\u9875\u7ed3\u6784\u7684\u53d8\u5316\uff0c\u53ef\u4ee5\u53ea\u5728 .mkdocs.yml \u4e2d\u589e\u5220\u7a7a\u683c\u3002 \u4e3a\u4ec0\u4e48\u663e\u793a\u6211\u63d0\u4ea4\u5931\u8d25\u4e86\uff1f \u00b6 Travis\u53ea\u5bf9 master \u5206\u652f\u8fdb\u884c\u7f51\u9875\u6e32\u67d3\uff0c\u53ea\u8981\u4ed3\u5e93\u6536\u5230\u60a8\u7684PR\u5c31\u53ef\u4ee5\u4e86\u3002 \u5bf9\u63d0\u4ea4\u7684\u6587\u6863\u6709\u8981\u6c42\u5417\uff1f \u00b6 \u9996\u5148\u8981\u4fdd\u8bc1\u5185\u5bb9\u53d1\u6b63\u786e\u6027\u548c\u4e25\u8c28\u6027\u3002\u5176\u6b21\u6211\u4eec\u5e0c\u671b\u60a8\u53ef\u4ee5\u591a\u4e00\u4e9b\u8bb2\u89e3\u548c\u56fe\u793a\uff0c\u5c3d\u91cf\u4fbf\u4e8e\u5176\u4ed6\u4eba\u7406\u89e3\u3002 \u76ee\u524d\u7684\u5185\u5bb9\u597d\u5c11\u554a... \u00b6 \u662f\u7684\uff0c\u76ee\u524d\u7f51\u7ad9\u8fdc\u8fdc\u79f0\u4e0d\u4e0a\u662f\u4e00\u4e2a\u5408\u683c\u7684 Wiki\u3002\u5f53\u524d\u7684\u5185\u5bb9\u4e5f\u6bd4\u8f83\u57fa\u7840\u3002\u6240\u4ee5\u5728\u8fd9\u91cc\u8fdb\u884c\u5f81\u7a3f\u548c\u62db\u52df\uff0c\u5e0c\u671b\u53ef\u4ee5\u9047\u5230\u6709\u540c\u6837\u60f3\u6cd5\u7684\u670b\u53cb\uff0c\u6211\u4eec\u4e00\u8d77\u628a\u8fd9\u4e2a\u7f51\u7ad9\u5b8c\u5584\u8d77\u6765\u3002\u6211\u4eec\u671f\u5f85\u60a8\u7684PR\u3002","title":"F.A.Q"},{"location":"FAQ/#faq","text":"","title":"F.A.Q"},{"location":"FAQ/#_1","text":"\u5b66\u4e60\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u76f8\u5173\u5185\u5bb9 \u53d1\u5e03\u4e2d\u56fd\u4f20\u5a92\u5927\u5b66ACM\u96c6\u8bad\u961f\u76f8\u5173\u5b89\u6392","title":"\u8fd9\u4e2a\u7f51\u7ad9\u662f\u5e72\u4ec0\u4e48\u7528\u7684\uff1f"},{"location":"FAQ/#_2","text":"\u53ea\u6709 .mkdocs.yml \u5185\u5bb9\u53d1\u751f\u4e86\u6539\u53d8\uff0c\u7f51\u7ad9\u624d\u4f1a\u53d8\u5316\u3002\u5982\u679c\u60a8\u7684\u66f4\u6539\u4e0d\u6d89\u53ca\u7f51\u9875\u7ed3\u6784\u7684\u53d8\u5316\uff0c\u53ef\u4ee5\u53ea\u5728 .mkdocs.yml \u4e2d\u589e\u5220\u7a7a\u683c\u3002","title":"\u4e3a\u4ec0\u4e48\u6211\u8fdb\u884c\u4e86\u4fee\u6539\u4f46\u662f\u7f51\u7ad9\u6ca1\u6709\u53d8\u5316\uff1f"},{"location":"FAQ/#_3","text":"Travis\u53ea\u5bf9 master \u5206\u652f\u8fdb\u884c\u7f51\u9875\u6e32\u67d3\uff0c\u53ea\u8981\u4ed3\u5e93\u6536\u5230\u60a8\u7684PR\u5c31\u53ef\u4ee5\u4e86\u3002","title":"\u4e3a\u4ec0\u4e48\u663e\u793a\u6211\u63d0\u4ea4\u5931\u8d25\u4e86\uff1f"},{"location":"FAQ/#_4","text":"\u9996\u5148\u8981\u4fdd\u8bc1\u5185\u5bb9\u53d1\u6b63\u786e\u6027\u548c\u4e25\u8c28\u6027\u3002\u5176\u6b21\u6211\u4eec\u5e0c\u671b\u60a8\u53ef\u4ee5\u591a\u4e00\u4e9b\u8bb2\u89e3\u548c\u56fe\u793a\uff0c\u5c3d\u91cf\u4fbf\u4e8e\u5176\u4ed6\u4eba\u7406\u89e3\u3002","title":"\u5bf9\u63d0\u4ea4\u7684\u6587\u6863\u6709\u8981\u6c42\u5417\uff1f"},{"location":"FAQ/#_5","text":"\u662f\u7684\uff0c\u76ee\u524d\u7f51\u7ad9\u8fdc\u8fdc\u79f0\u4e0d\u4e0a\u662f\u4e00\u4e2a\u5408\u683c\u7684 Wiki\u3002\u5f53\u524d\u7684\u5185\u5bb9\u4e5f\u6bd4\u8f83\u57fa\u7840\u3002\u6240\u4ee5\u5728\u8fd9\u91cc\u8fdb\u884c\u5f81\u7a3f\u548c\u62db\u52df\uff0c\u5e0c\u671b\u53ef\u4ee5\u9047\u5230\u6709\u540c\u6837\u60f3\u6cd5\u7684\u670b\u53cb\uff0c\u6211\u4eec\u4e00\u8d77\u628a\u8fd9\u4e2a\u7f51\u7ad9\u5b8c\u5584\u8d77\u6765\u3002\u6211\u4eec\u671f\u5f85\u60a8\u7684PR\u3002","title":"\u76ee\u524d\u7684\u5185\u5bb9\u597d\u5c11\u554a..."},{"location":"c-basic/array/","text":"\u57fa\u672c\u683c\u5f0f \u00b6 1 type arrayName [ arraySize ]; \u4e00\u7ef4\u6570\u7ec4 \u00b6 1 2 3 4 5 int a [ 1005 ]; int b [ 3 ] = { 1 , 2 , 3 }; int c [] = { 1 , 2 , 3 }; scanf ( \"%d\" , & a [ 0 ]); printf ( \"%d\" , c [ 3 ]); // \u8d8a\u754c \u4e8c\u7ef4\u6570\u7ec4 \u00b6 1 double mp [ 105 ][ 105 ]; \u5b57\u7b26\u6570\u7ec4 \u00b6 1 2 3 char d [ 105 ] = { '\\0' }; char parr [] = \"zifushuzu\" ; char charr [] = { 'z' , 'i' , 'f' , 'u' , 's' , 'h' , 'u' , 'z' , 'u' }; * \u8bfb\u5165\u65f6\u6ce8\u610f\u56de\u8f66\u4e0e\u7a7a\u683c","title":"\u6570\u7ec4"},{"location":"c-basic/array/#_1","text":"1 type arrayName [ arraySize ];","title":"\u57fa\u672c\u683c\u5f0f"},{"location":"c-basic/array/#_2","text":"1 2 3 4 5 int a [ 1005 ]; int b [ 3 ] = { 1 , 2 , 3 }; int c [] = { 1 , 2 , 3 }; scanf ( \"%d\" , & a [ 0 ]); printf ( \"%d\" , c [ 3 ]); // \u8d8a\u754c","title":"\u4e00\u7ef4\u6570\u7ec4"},{"location":"c-basic/array/#_3","text":"1 double mp [ 105 ][ 105 ];","title":"\u4e8c\u7ef4\u6570\u7ec4"},{"location":"c-basic/array/#_4","text":"1 2 3 char d [ 105 ] = { '\\0' }; char parr [] = \"zifushuzu\" ; char charr [] = { 'z' , 'i' , 'f' , 'u' , 's' , 'h' , 'u' , 'z' , 'u' }; * \u8bfb\u5165\u65f6\u6ce8\u610f\u56de\u8f66\u4e0e\u7a7a\u683c","title":"\u5b57\u7b26\u6570\u7ec4"},{"location":"c-basic/function/","text":"\u5b9a\u4e49 \u00b6 1 2 3 4 5 \u8fd4\u56de\u503c\u7c7b\u578b \u51fd\u6570\u540d(\u53c2\u65701\u7c7b\u578b \u53c2\u65701\u540d\u79f0, \u53c2\u65702\u7c7b\u578b \u53c2\u65702\u540d\u79f0\u2026\u2026) { \u8bed\u53e5\u7ec4(\u51fd\u6570\u4f53); \u8fd4\u56de\u503c; } * \u51fd\u6570\u4e0d\u5141\u8bb8\u5d4c\u5957\u5b9a\u4e49 \uff0c\u4f46\u662f\u5141\u8bb8\u5d4c\u5957\u4f7f\u7528\u3002 1 2 3 4 5 6 int sum ( int a , int b ) { int ans = 0 ; ans = a + b ; return ans ; } * \u4e00\u65e6\u4f7f\u7528\u5934\u6587\u4ef6\u540e\u4e0d\u53ef\u4ee5\u5b9a\u4e49\u5e93\u51fd\u6570\uff0c\u6bd4\u5982\uff0c\u4f7f\u7528 <stdio.h> \u540e\u4e0d\u80fd\u518d\u81ea\u5df1\u5b9a\u4e49 printf \u51fd\u6570\u3002\u539f\u5219\u4e0a\uff0c\u5e73\u5e38\u5b9a\u4e49\u51fd\u6570\u65f6\u4e5f\u5e94\u5c3d\u91cf\u907f\u514d\u4e0e\u5e93\u51fd\u6570\u91cd\u540d\u3002 \u8c03\u7528 \u00b6 \u8c03\u7528\u51fd\u6570\uff1a \u51fd\u6570\u540d\uff08\u53c2\u65701, \u53c2\u65702\uff0c\u2026\u2026\uff09 \u5bf9\u51fd\u6570\u7684\u8c03\u7528\uff0c\u4e5f\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\u3002\u51fd\u6570\u8c03\u7528\u8868\u8fbe\u5f0f\u7684\u503c\uff0c\u7531\u51fd\u6570\u5185\u90e8\u7684 return \u8bed\u53e5\u51b3\u5b9a\u3002 printf \u4e5f\u662f\u51fd\u6570\uff0c\u5b83\u7684\u58f0\u660e\u5728 <stdio.h> \u5934\u6587\u4ef6\u91cc\u3002 Q: \u4e3a\u4ec0\u4e48\u5927\u4fa0\u4eec\u4f7f\u7528\u7edd\u62db\u65f6\u90fd\u8981\u5148\u558a\u4e00\u58f0\u201c\u964d\u9f99\u5341\u516b\u638c\u201d\u4e4b\u7c7b\u7684\uff1f A: \u56e0\u4e3a \u51fd\u6570\u8c03\u7528\u4e4b\u524d\u8981\u5148\u58f0\u660e \u3002 1 2 3 4 5 6 7 8 9 10 11 #include <stdio.h> int sum ( int a , int b ); //\u58f0\u660e int main () { int a = 1 , b = 2 ; printf ( \"%d \\n \" , sum ( a , b )); } int sum ( int a , int b ) { return a + b ; } \u8fd4\u56de\u503c \u00b6 return\u8bed\u53e5\u8bed\u6cd5\u5982\u4e0b\uff1a \u2003 return \u8fd4\u56de\u503c\uff1b return\u8bed\u53e5\u7684\u529f\u80fd\u662f \u7ed3\u675f\u51fd\u6570\u7684\u6267\u884c\uff0c\u5e76\u5c06\u201c\u8fd4\u56de\u503c\u201d\u4f5c\u4e3a\u7ed3\u679c\u8fd4\u56de \u3002\u201c\u8fd4\u56de\u503c\u201d\u662f\u5e38\u91cf\u3001\u53d8\u91cf\u6216\u590d\u6742\u7684\u8868\u8fbe\u5f0f\u5747\u53ef\u3002 \u5982\u679c\u51fd\u6570\u8fd4\u56de\u503c\u7c7b\u578b\u4e3a void \uff0creturn\u8bed\u53e5\u5c31\u76f4\u63a5\u5199 return ; * 1 2 3 4 5 6 7 8 9 10 11 12 13 int a [] = { 1 , 1 , 2 , 3 , 5 , 8 , 13 }; void show ( int n ) { for ( int i = 0 ; i < n ; i ++ ) printf ( \"%d \" , a [ i ]); return ; } int Max ( int x , int y ) // \u6c42\u4e24\u4e2a\u6574\u578b\u53d8\u91cf\u4e2d\u7684\u8f83\u5927\u503c { if ( x > y ) return x ; return y ; // \u9664void\u5916\u51fd\u6570\u4e00\u5b9a\u8981\u6709\u8fd4\u56de\uff0c\u8fd4\u56de\u610f\u5473\u7740\u51fd\u6570\u7ed3\u675f } \u5168\u5c40\u53d8\u91cf\u4e0e\u5c40\u90e8\u53d8\u91cf \u00b6 \u5728\u51fd\u6570\u5916\u90e8\u5b9a\u4e49\u7684\u53d8\u91cf\u79f0\u4e3a\u5168\u5c40\u53d8\u91cf\uff0c\u5728\u51fd\u6570\u5185\u90e8\u5b9a\u4e49\u7684\u53d8\u91cf\u79f0\u4e3a\u5c40\u90e8\u53d8\u91cf\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include <stdio.h> int a [ 105 ]; //\u6570\u7ec4a-\u5168\u5c40 int n ; //n-\u5168\u5c40 int muln ( int x ) //x-\u5c40\u90e8 { int t ; //t-\u5c40\u90e8 t = x * n ; return t ; } int main () { scanf ( \"%d\" , & n ); for ( int i = 0 ; i < n ; i ++ ) //i-\u5c40\u90e8 scanf ( \"%d\" , & a [ i ]); } \u5168\u5c40\u53d8\u91cf \u00b6 \u5168\u5c40\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u662f\u4ece\u53d8\u91cf\u5b9a\u4e49\u7684\u4f4d\u7f6e\u5f00\u59cb\u5230\u6587\u4ef6\u7ed3\u675f\uff0c\u53ef\u4ee5\u5728\u6587\u4ef6\u4e2d\u4f4d\u4e8e\u5168\u5c40\u53d8\u91cf\u5b9a\u4e49\u540e\u9762\u7684\u4efb\u4f55\u51fd\u6570\u4e2d\u4f7f\u7528\u3002 \u8fc7\u591a\u5730\u4f7f\u7528\u5168\u5c40\u53d8\u91cf\uff0c\u4f1a\u589e\u52a0\u8c03\u8bd5\u96be\u5ea6\u3002\u56e0\u4e3a\u591a\u4e2a\u51fd\u6570\u90fd\u80fd\u6539\u53d8\u5168\u5c40\u53d8\u91cf\u7684\u503c\u3002 \u5168\u5c40\u53d8\u91cf\u5728\u5b9a\u4e49\u65f6\u9ed8\u8ba4\u521d\u503c\u4e3a0\u3002 \u5c40\u90e8\u53d8\u91cf \u00b6 \u5c40\u90e8\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u662f\u5728\u5b9a\u4e49\u8be5\u53d8\u91cf\u7684\u51fd\u6570\u5185\u90e8\uff0c\u5c40\u90e8\u53d8\u91cf\u53ea\u5728\u5b9a\u4e49\u5b83\u7684\u51fd\u6570\u5185\u6709\u6548\u3002 \u5728\u4e0d\u540c\u7684\u51fd\u6570\u4e2d\u5c40\u90e8\u53d8\u91cf\u540d\u53ef\u4ee5\u76f8\u540c\u3002 \u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf\u548c\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u662f\u53ef\u4ee5\u91cd\u540d\u7684\uff0c\u5728\u76f8\u540c\u7684\u4f5c\u7528\u57df\u5185\u5c40\u90e8\u53d8\u91cf\u6709\u6548\u3002\u4f46\u6613\u51fa\u9519\uff01\u5c3d\u91cf\u907f\u514d\u4f7f\u7528\u3002 \u5728\u4ee3\u7801\u5757\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf\u7684\u5b58\u5728\u65f6\u95f4\u548c\u4f5c\u7528\u57df\u5c06\u88ab\u9650\u5236\u5728\u8be5\u4ee3\u7801\u5757\u4e2d\u3002\u5982 for(int i; i<=n; i++) sum += i; \u4e2d\u7684 i \u662f\u5728\u8be5 for \u5faa\u73af\u8bed\u53e5\u4e2d\u5b9a\u4e49\u7684\uff0c\u5b58\u5728\u65f6\u95f4\u548c\u4f5c\u7528\u57df\u53ea\u80fd\u88ab\u9650\u5236\u5728\u8be5for\u5faa\u73af\u8bed\u53e5\u4e2d\u3002 \u5c40\u90e8\u53d8\u91cf\u503c\u662f\u968f\u673a\u7684\uff0c\u8981 \u521d\u59cb\u5316\u521d\u503c \u3002 \u5c40\u90e8\u53d8\u91cf\u53d7\u6808\u7a7a\u95f4\u5927\u5c0f\u9650\u5236\uff0c\u5927\u6570\u7ec4\u9700\u8981\u6ce8\u610f\u3002\u901a\u4fd7\u5730\u8bf4\uff0cmain\u51fd\u6570\u91cc\u6570\u7ec4\u4e0d\u80fd\u5f00\u5f88\u5927\uff08\u5341\u4e07\u7ea7\u522b\uff09\u3002 \u51fd\u6570\u53c2\u6570\u7684\u4f20\u9012 \u00b6 \u539f\u5219\uff1a \u7528\u4ec0\u4e48\u4f20\u4ec0\u4e48 1 2 3 4 5 \u8fd4\u56de\u503c\u7c7b\u578b \u51fd\u6570\u540d(\u53c2\u65701\u7c7b\u578b \u53c2\u65701\u540d\u79f0, \u53c2\u65702\u7c7b\u578b \u53c2\u65702\u540d\u79f0\u2026\u2026) { \u51fd\u6570\u4f53; \u8fd4\u56de\u503c; } \u6574\u578b/\u5b9e\u578b\u53d8\u91cf\u4f5c\u51fd\u6570\u53c2\u6570 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 double dis ( double x1 , double y1 , double x2 , double y2 ) { return sqrt (( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 )); } int fun ( double x ) { return x ; //double -> int \u7c7b\u578b\u8f6c\u6362 } int Max ( int a , int b ) { return a > b ? a : b ; } \u4e00\u7ef4\u6570\u7ec4\u4f5c\u51fd\u6570\u53c2\u6570 \u00b6 \u5199\u6cd5\u5982\u4e0b\uff1a \u51fd\u6570\u7c7b\u578b \u51fd\u6570\u540d(\u6570\u7ec4\u7c7b\u578b\u540d \u6570\u7ec4\u540d[]) \u4e0d\u7528\u5199\u51fa\u6570\u7ec4\u7684\u5143\u7d20\u4e2a\u6570\u3002 \u4f8b\u5982\uff1a 1 2 3 4 5 6 7 8 9 void PrintArray ( int a []) { ... } int b [] = { 1 , 2 , 3 }; int main () { PrintArray ( b ); //\u8c03\u7528\u65f6\u53ea\u7528\u5199\u6570\u7ec4\u540d } * \u6570\u7ec4\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\u65f6\u662f\u4f20\u5740\u5f15\u7528\u7684\uff0c\u5373\u5f62\u53c2\u6570\u7ec4\u6539\u53d8\u4e86\uff0c\u5b9e\u53c2\u6570\u7ec4\u4e5f\u4f1a\u6539\u53d8\u3002 \u4e8c\u7ef4\u6570\u7ec4\u4f5c\u4e3a\u51fd\u6570\u7684\u53c2\u6570 \u00b6 \u4e8c\u7ef4\u6570\u7ec4\u4f5c\u4e3a\u5f62\u53c2\u65f6\uff0c\u5fc5\u987b\u5199\u660e\u6570\u7ec4\u6709\u591a\u5c11\u5217\uff0c\u4e0d\u7528\u5199\u660e\u6709\u591a\u5c11\u884c\u3002 1 2 3 4 void PrintArray ( int a [][ 5 ]) { printf ( \"%d\" , a [ 4 ][ 3 ]); } Contribute by LyuLumos","title":"\u51fd\u6570"},{"location":"c-basic/function/#_1","text":"1 2 3 4 5 \u8fd4\u56de\u503c\u7c7b\u578b \u51fd\u6570\u540d(\u53c2\u65701\u7c7b\u578b \u53c2\u65701\u540d\u79f0, \u53c2\u65702\u7c7b\u578b \u53c2\u65702\u540d\u79f0\u2026\u2026) { \u8bed\u53e5\u7ec4(\u51fd\u6570\u4f53); \u8fd4\u56de\u503c; } * \u51fd\u6570\u4e0d\u5141\u8bb8\u5d4c\u5957\u5b9a\u4e49 \uff0c\u4f46\u662f\u5141\u8bb8\u5d4c\u5957\u4f7f\u7528\u3002 1 2 3 4 5 6 int sum ( int a , int b ) { int ans = 0 ; ans = a + b ; return ans ; } * \u4e00\u65e6\u4f7f\u7528\u5934\u6587\u4ef6\u540e\u4e0d\u53ef\u4ee5\u5b9a\u4e49\u5e93\u51fd\u6570\uff0c\u6bd4\u5982\uff0c\u4f7f\u7528 <stdio.h> \u540e\u4e0d\u80fd\u518d\u81ea\u5df1\u5b9a\u4e49 printf \u51fd\u6570\u3002\u539f\u5219\u4e0a\uff0c\u5e73\u5e38\u5b9a\u4e49\u51fd\u6570\u65f6\u4e5f\u5e94\u5c3d\u91cf\u907f\u514d\u4e0e\u5e93\u51fd\u6570\u91cd\u540d\u3002","title":"\u5b9a\u4e49"},{"location":"c-basic/function/#_2","text":"\u8c03\u7528\u51fd\u6570\uff1a \u51fd\u6570\u540d\uff08\u53c2\u65701, \u53c2\u65702\uff0c\u2026\u2026\uff09 \u5bf9\u51fd\u6570\u7684\u8c03\u7528\uff0c\u4e5f\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\u3002\u51fd\u6570\u8c03\u7528\u8868\u8fbe\u5f0f\u7684\u503c\uff0c\u7531\u51fd\u6570\u5185\u90e8\u7684 return \u8bed\u53e5\u51b3\u5b9a\u3002 printf \u4e5f\u662f\u51fd\u6570\uff0c\u5b83\u7684\u58f0\u660e\u5728 <stdio.h> \u5934\u6587\u4ef6\u91cc\u3002 Q: \u4e3a\u4ec0\u4e48\u5927\u4fa0\u4eec\u4f7f\u7528\u7edd\u62db\u65f6\u90fd\u8981\u5148\u558a\u4e00\u58f0\u201c\u964d\u9f99\u5341\u516b\u638c\u201d\u4e4b\u7c7b\u7684\uff1f A: \u56e0\u4e3a \u51fd\u6570\u8c03\u7528\u4e4b\u524d\u8981\u5148\u58f0\u660e \u3002 1 2 3 4 5 6 7 8 9 10 11 #include <stdio.h> int sum ( int a , int b ); //\u58f0\u660e int main () { int a = 1 , b = 2 ; printf ( \"%d \\n \" , sum ( a , b )); } int sum ( int a , int b ) { return a + b ; }","title":"\u8c03\u7528"},{"location":"c-basic/function/#_3","text":"return\u8bed\u53e5\u8bed\u6cd5\u5982\u4e0b\uff1a \u2003 return \u8fd4\u56de\u503c\uff1b return\u8bed\u53e5\u7684\u529f\u80fd\u662f \u7ed3\u675f\u51fd\u6570\u7684\u6267\u884c\uff0c\u5e76\u5c06\u201c\u8fd4\u56de\u503c\u201d\u4f5c\u4e3a\u7ed3\u679c\u8fd4\u56de \u3002\u201c\u8fd4\u56de\u503c\u201d\u662f\u5e38\u91cf\u3001\u53d8\u91cf\u6216\u590d\u6742\u7684\u8868\u8fbe\u5f0f\u5747\u53ef\u3002 \u5982\u679c\u51fd\u6570\u8fd4\u56de\u503c\u7c7b\u578b\u4e3a void \uff0creturn\u8bed\u53e5\u5c31\u76f4\u63a5\u5199 return ; * 1 2 3 4 5 6 7 8 9 10 11 12 13 int a [] = { 1 , 1 , 2 , 3 , 5 , 8 , 13 }; void show ( int n ) { for ( int i = 0 ; i < n ; i ++ ) printf ( \"%d \" , a [ i ]); return ; } int Max ( int x , int y ) // \u6c42\u4e24\u4e2a\u6574\u578b\u53d8\u91cf\u4e2d\u7684\u8f83\u5927\u503c { if ( x > y ) return x ; return y ; // \u9664void\u5916\u51fd\u6570\u4e00\u5b9a\u8981\u6709\u8fd4\u56de\uff0c\u8fd4\u56de\u610f\u5473\u7740\u51fd\u6570\u7ed3\u675f }","title":"\u8fd4\u56de\u503c"},{"location":"c-basic/function/#_4","text":"\u5728\u51fd\u6570\u5916\u90e8\u5b9a\u4e49\u7684\u53d8\u91cf\u79f0\u4e3a\u5168\u5c40\u53d8\u91cf\uff0c\u5728\u51fd\u6570\u5185\u90e8\u5b9a\u4e49\u7684\u53d8\u91cf\u79f0\u4e3a\u5c40\u90e8\u53d8\u91cf\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include <stdio.h> int a [ 105 ]; //\u6570\u7ec4a-\u5168\u5c40 int n ; //n-\u5168\u5c40 int muln ( int x ) //x-\u5c40\u90e8 { int t ; //t-\u5c40\u90e8 t = x * n ; return t ; } int main () { scanf ( \"%d\" , & n ); for ( int i = 0 ; i < n ; i ++ ) //i-\u5c40\u90e8 scanf ( \"%d\" , & a [ i ]); }","title":"\u5168\u5c40\u53d8\u91cf\u4e0e\u5c40\u90e8\u53d8\u91cf"},{"location":"c-basic/function/#_5","text":"\u5168\u5c40\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u662f\u4ece\u53d8\u91cf\u5b9a\u4e49\u7684\u4f4d\u7f6e\u5f00\u59cb\u5230\u6587\u4ef6\u7ed3\u675f\uff0c\u53ef\u4ee5\u5728\u6587\u4ef6\u4e2d\u4f4d\u4e8e\u5168\u5c40\u53d8\u91cf\u5b9a\u4e49\u540e\u9762\u7684\u4efb\u4f55\u51fd\u6570\u4e2d\u4f7f\u7528\u3002 \u8fc7\u591a\u5730\u4f7f\u7528\u5168\u5c40\u53d8\u91cf\uff0c\u4f1a\u589e\u52a0\u8c03\u8bd5\u96be\u5ea6\u3002\u56e0\u4e3a\u591a\u4e2a\u51fd\u6570\u90fd\u80fd\u6539\u53d8\u5168\u5c40\u53d8\u91cf\u7684\u503c\u3002 \u5168\u5c40\u53d8\u91cf\u5728\u5b9a\u4e49\u65f6\u9ed8\u8ba4\u521d\u503c\u4e3a0\u3002","title":"\u5168\u5c40\u53d8\u91cf"},{"location":"c-basic/function/#_6","text":"\u5c40\u90e8\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u662f\u5728\u5b9a\u4e49\u8be5\u53d8\u91cf\u7684\u51fd\u6570\u5185\u90e8\uff0c\u5c40\u90e8\u53d8\u91cf\u53ea\u5728\u5b9a\u4e49\u5b83\u7684\u51fd\u6570\u5185\u6709\u6548\u3002 \u5728\u4e0d\u540c\u7684\u51fd\u6570\u4e2d\u5c40\u90e8\u53d8\u91cf\u540d\u53ef\u4ee5\u76f8\u540c\u3002 \u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf\u548c\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u662f\u53ef\u4ee5\u91cd\u540d\u7684\uff0c\u5728\u76f8\u540c\u7684\u4f5c\u7528\u57df\u5185\u5c40\u90e8\u53d8\u91cf\u6709\u6548\u3002\u4f46\u6613\u51fa\u9519\uff01\u5c3d\u91cf\u907f\u514d\u4f7f\u7528\u3002 \u5728\u4ee3\u7801\u5757\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf\u7684\u5b58\u5728\u65f6\u95f4\u548c\u4f5c\u7528\u57df\u5c06\u88ab\u9650\u5236\u5728\u8be5\u4ee3\u7801\u5757\u4e2d\u3002\u5982 for(int i; i<=n; i++) sum += i; \u4e2d\u7684 i \u662f\u5728\u8be5 for \u5faa\u73af\u8bed\u53e5\u4e2d\u5b9a\u4e49\u7684\uff0c\u5b58\u5728\u65f6\u95f4\u548c\u4f5c\u7528\u57df\u53ea\u80fd\u88ab\u9650\u5236\u5728\u8be5for\u5faa\u73af\u8bed\u53e5\u4e2d\u3002 \u5c40\u90e8\u53d8\u91cf\u503c\u662f\u968f\u673a\u7684\uff0c\u8981 \u521d\u59cb\u5316\u521d\u503c \u3002 \u5c40\u90e8\u53d8\u91cf\u53d7\u6808\u7a7a\u95f4\u5927\u5c0f\u9650\u5236\uff0c\u5927\u6570\u7ec4\u9700\u8981\u6ce8\u610f\u3002\u901a\u4fd7\u5730\u8bf4\uff0cmain\u51fd\u6570\u91cc\u6570\u7ec4\u4e0d\u80fd\u5f00\u5f88\u5927\uff08\u5341\u4e07\u7ea7\u522b\uff09\u3002","title":"\u5c40\u90e8\u53d8\u91cf"},{"location":"c-basic/function/#_7","text":"\u539f\u5219\uff1a \u7528\u4ec0\u4e48\u4f20\u4ec0\u4e48 1 2 3 4 5 \u8fd4\u56de\u503c\u7c7b\u578b \u51fd\u6570\u540d(\u53c2\u65701\u7c7b\u578b \u53c2\u65701\u540d\u79f0, \u53c2\u65702\u7c7b\u578b \u53c2\u65702\u540d\u79f0\u2026\u2026) { \u51fd\u6570\u4f53; \u8fd4\u56de\u503c; }","title":"\u51fd\u6570\u53c2\u6570\u7684\u4f20\u9012"},{"location":"c-basic/function/#_8","text":"1 2 3 4 5 6 7 8 9 10 11 12 double dis ( double x1 , double y1 , double x2 , double y2 ) { return sqrt (( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 )); } int fun ( double x ) { return x ; //double -> int \u7c7b\u578b\u8f6c\u6362 } int Max ( int a , int b ) { return a > b ? a : b ; }","title":"\u6574\u578b/\u5b9e\u578b\u53d8\u91cf\u4f5c\u51fd\u6570\u53c2\u6570"},{"location":"c-basic/function/#_9","text":"\u5199\u6cd5\u5982\u4e0b\uff1a \u51fd\u6570\u7c7b\u578b \u51fd\u6570\u540d(\u6570\u7ec4\u7c7b\u578b\u540d \u6570\u7ec4\u540d[]) \u4e0d\u7528\u5199\u51fa\u6570\u7ec4\u7684\u5143\u7d20\u4e2a\u6570\u3002 \u4f8b\u5982\uff1a 1 2 3 4 5 6 7 8 9 void PrintArray ( int a []) { ... } int b [] = { 1 , 2 , 3 }; int main () { PrintArray ( b ); //\u8c03\u7528\u65f6\u53ea\u7528\u5199\u6570\u7ec4\u540d } * \u6570\u7ec4\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\u65f6\u662f\u4f20\u5740\u5f15\u7528\u7684\uff0c\u5373\u5f62\u53c2\u6570\u7ec4\u6539\u53d8\u4e86\uff0c\u5b9e\u53c2\u6570\u7ec4\u4e5f\u4f1a\u6539\u53d8\u3002","title":"\u4e00\u7ef4\u6570\u7ec4\u4f5c\u51fd\u6570\u53c2\u6570"},{"location":"c-basic/function/#_10","text":"\u4e8c\u7ef4\u6570\u7ec4\u4f5c\u4e3a\u5f62\u53c2\u65f6\uff0c\u5fc5\u987b\u5199\u660e\u6570\u7ec4\u6709\u591a\u5c11\u5217\uff0c\u4e0d\u7528\u5199\u660e\u6709\u591a\u5c11\u884c\u3002 1 2 3 4 void PrintArray ( int a [][ 5 ]) { printf ( \"%d\" , a [ 4 ][ 3 ]); } Contribute by LyuLumos","title":"\u4e8c\u7ef4\u6570\u7ec4\u4f5c\u4e3a\u51fd\u6570\u7684\u53c2\u6570"},{"location":"c-basic/grammar/","text":"\u7406\u8bba\u77e5\u8bc6 \u00b6 C\u8bed\u8a00\u4e66\u5199\u683c\u5f0f\u662f\u81ea\u7531\u7684\uff0c\u6bcf\u884c\u53ef\u4ee5\u5199\u591a\u4e2a\u8bed\u53e5\uff0c\u53ef\u4ee5\u5199\u591a\u884c\u3002 \u4e00\u4e2aC\u8bed\u8a00\u7a0b\u5e8f\u6709\u4e14\u53ea\u6709\u4e00\u4e2amain\u51fd\u6570\uff0c\u662f\u7a0b\u5e8f\u8fd0\u884c\u7684\u8d77\u70b9\u3002 \u6bcf\u4e2aC\u8bed\u8a00\u7a0b\u5e8f\u5199\u5b8c\u540e\uff0c\u90fd\u662f\u5148\u7f16\u8bd1\uff0c\u540e\u94fe\u63a5\uff0c\u6700\u540e\u8fd0\u884c\u3002\uff08.c->.obj->.exe\uff09\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u6ce8\u610f.c\u548c.obj\u6587\u4ef6\u65f6\u65e0\u6cd5\u8fd0\u884c\u7684\uff0c\u53ea\u6709.exe\u6587\u4ef6\u624d\u53ef\u4ee5\u8fd0\u884c\u3002 C\u9762\u5411\u8fc7\u7a0b\uff0cC++\u3001java\u9762\u5411\u5bf9\u8c61\u3002 \u6807\u8bc6\u7b26 \u00b6 \u5408\u6cd5\u7684\u8981\u6c42\u662f\u7531\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u4e0b\u5212\u7ebf\u7ec4\u6210\uff0c\u5e76\u4e14\u7b2c\u4e00\u4e2a\u5fc5\u987b\u4e3a\u5b57\u6bcd\u6216\u662f\u4e0b\u5212\u7ebf\u3002 \u5173\u952e\u5b57\u4e0d\u53ef\u4ee5\u4f5c\u4e3a\u7528\u6237\u6807\u8bc6\u7b26\u53f7\u3002 main define scanf printf include If \u90fd\u4e0d\u662f\u5173\u952e\u5b57\u3002 \u9a7c\u5cf0\u547d\u540d\u6cd5 \u6574\u6570 \u00b6 \u6570\u636e\u7c7b\u578b \u5b9a\u4e49\u6807\u8bc6\u7b26 \u5360\u5b57\u8282\u6570 \u6570\u503c\u8303\u56f4 \u77ed\u6574\u578b short 2 -2 15 ~2 15 -1 (32767) \u6574\u578b int 4 -2 31 ~2 31 -1(\u7ea62\u00d710 9 ) \u8d85\u957f\u6574\u578b long long 8 -2 63 ~2 63 -1(\u7ea69\u00d710 18 ) \u65e0\u7b26\u53f7\u6574\u578b unsigned int 4 0~2 32 -1(\u7ea64\u00d710 9 ) \u5176\u4f59\u65e0\u7b26\u53f7\u7c7b\u578b\u540c\u7406 \u5b9e\u6570 \u00b6 \u6570\u636e\u7c7b\u578b \u5b9a\u4e49\u6807\u8bc6\u7b26 \u6570\u503c\u8303\u56f4 \u5360\u5b57\u8282\u6570 \u6709\u6548\u4f4d\u6570 \u5355\u7cbe\u5ea6\u5b9e\u578b float -3.4\u00d710 38 ~3.4\u00d710 38 4 6~7\u4f4d \u53cc\u7cbe\u5ea6\u5b9e\u578b double -1.7\u00d710 308 ~1.7\u00d710 308 8 15~16\u4f4d \u5e03\u5c14\u578b bool true \u6216 false 1 \u5168\u6574\u6570\u9664\u6cd5 \u00b6 \u4e24\u4e2a\u6574\u6570\u76f8\u9664\u7ed3\u679c\u8fd8\u662f\u6574\u6570\uff0c 5/2 \u7684\u503c\u4e3a2\u800c\u4e0d\u662f2.5 \u89e3\u51b3\u65b9\u6cd5\uff1a\u81f3\u5c11\u4e00\u4e2a\u6570\u8f6c\u6362\u6210\u6d6e\u70b9\u6570\uff0c\u5982 5/2.0 (float)a/b \u9664\u4ee50\u4f1a\u8fd4\u56de NaN \u5b57\u7b26\u578b \u00b6 \u5b9a\u4e49\u6807\u8bc6\u7b26 \u5360\u5b57\u8282\u6570 \u6570\u503c\u8303\u56f4 char 1 -128~127 \u76f4\u63a5\u8868\u793a char c = 'A'; ASCII\u7801\u8868\u793a char ch = 65; \u8f6c\u4e49\u5b57\u7b26 \u6362\u884c\u7b26 '\\n' \u5355\u5f15\u53f7 '\\'' \u53cd\u659c\u6760 '\\\\' \u5b57\u7b26\u578b\u4e5f\u53ef\u4ee5\u505a\u52a0\u51cf\u8fd0\u7b97 \u8fd0\u7b97\u7b26\u548c\u8868\u8fbe\u5f0f \u00b6 \u8fd0\u7b97\u7b26\u7c7b\u578b \u5e38\u7528\u8fd0\u7b97\u7b26 \u793a\u4f8b \u7b97\u672f\u8fd0\u7b97\u7b26 + - * / % ++ -- 5 % 2 \u5173\u7cfb\u8fd0\u7b97\u7b26 > < == >= <= != a == 1 \u903b\u8f91\u8fd0\u7b97\u7b26 && || ! a>0 && a<b \u4f4d\u64cd\u4f5c\u8fd0\u7b97\u7b26 & | ~ ^ << >> 1<<2 \u8d4b\u503c\u8fd0\u7b97\u7b26 = += &= <<= a += 2 \u6761\u4ef6\u8fd0\u7b97\u7b26 ? : a == 1 ? 1 : 0 \u6307\u9488\u8fd0\u7b97\u7b26 * & *it \u8d4b\u503c\u8bed\u53e5 \u00b6 \u683c\u5f0f\uff1a \u2003\u2003 \u53d8\u91cf = \u8868\u8fbe\u5f0f; \u610f\u4e49\uff1a \u2003\u2003\u5c06\u53f3\u8fb9\u8868\u8fbe\u5f0f\u7684\u503c\u8d4b\u7ed9\u5de6\u8fb9\u7684\u53d8\u91cf \u4e00\u5b9a\u8981\u533a\u5206 = \u548c \u7b49\u4e8e\uff0c C\u8bed\u8a00\u4e2d\u5224\u65ad\u76f8\u7b49\u7528 == \u8fd0\u7b97\u7b26 1 2 if ( a = 1 ) //\u00d7 while ( a = 1 ) //\u00d7 \u5728\u8fdb\u884c\u8d4b\u503c\u8fd0\u7b97\u65f6\uff0c\u5982\u679c\u8d4b\u503c\u8fd0\u7b97\u7b26\u4e24\u8fb9\u7684\u6570\u636e\u7c7b\u578b\u4e0d\u540c\uff0c\u7cfb\u7edf\u5c06\u4f1a\u81ea\u52a8\u8fdb\u884c\u7c7b\u578b\u8f6c\u6362\uff0c\u5373\u5c06\u8d4b\u503c\u8fd0\u7b97\u7b26\u53f3\u8fb9\u7684\u6570\u636e\u7c7b\u578b\u8f6c\u6362\u6210\u5de6\u8fb9\u7684\u53d8\u91cf\u7c7b\u578b\u3002\u53ef\u80fd\u4f1a\u51fa\u73b0\u6570\u636e\u4e22\u5931\u3002 \u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7 \u00b6 \u81ea\u589e\u8868\u8fbe\u5f0f \u00b6 1 2 3 4 5 6 7 8 9 10 int a = 21 ; int c ; // a \u7684\u503c\u5728\u8d4b\u503c\u4e4b\u524d\u4e0d\u4f1a\u81ea\u589e c = a ++ ; // c = 21 a = 22 // a \u7684\u503c\u5728\u8d4b\u503c\u4e4b\u524d\u81ea\u589e c = ++ a ; // c = 23 a = 23 \u4f4d\u8fd0\u7b97 \u00b6 \u8fd0\u7b97\u7b26 \u540d\u79f0 \u4f5c\u7528 & \u4e0e \u4e24\u4e2a\u4f4d\u90fd\u4e3a1\u65f6\uff0c\u7ed3\u679c\u624d\u4e3a1 | \u6216 \u4e24\u4e2a\u4f4d\u90fd\u4e3a0\u65f6\uff0c\u7ed3\u679c\u624d\u4e3a0 ^ \u5f02\u6216 \u4e24\u4e2a\u4f4d\u76f8\u540c\u4e3a0\uff0c\u76f8\u5f02\u4e3a1 ~ \u53d6\u53cd 0\u53d81\uff0c1\u53d80 << \u5de6\u79fb \u5404\u4e8c\u8fdb\u4f4d\u5168\u90e8\u5de6\u79fb\u82e5\u5e72\u4f4d\uff0c\u9ad8\u4f4d\u4e22\u5f03\uff0c\u4f4e\u4f4d\u88650 >> \u53f3\u79fb \u5404\u4e8c\u8fdb\u4f4d\u5168\u90e8\u53f3\u79fb\u82e5\u5e72\u4f4d\uff0c\u5bf9\u65e0\u7b26\u53f7\u6570\uff0c\u9ad8\u4f4d\u88650\uff0c\u6709\u7b26\u53f7\u6570 \u533a\u5206 | \u548c || \uff0c & \u548c && \u6807\u51c6\u8f93\u5165\u8f93\u51fa \u00b6 \u5934\u6587\u4ef6\uff1a <stdio.h> \u8f93\u5165\u51fd\u6570\uff1a scanf(\"%\u5bf9\u5e94\u683c\u5f0f\u5b57\u7b26\", &\u53d8\u91cf\u540d); \u8f93\u51fa\u51fd\u6570: printf(\"\u5176\u4ed6\u5b57\u7b26 %\u5bf9\u5e94\u683c\u5f0f\u5b57\u7b26 \u5176\u4ed6\u5b57\u7b26\", \u53d8\u91cf\u540d); \u4e00\u5b9a\u4e0d\u8981\u5fd8\u8bb0 scanf \u51fd\u6570\u4e2d\u7684& \u5b57\u7b26\u7c7b\u578b\u53d8\u91cf\u540d = getchar(); \u4f7f\u7528\u65f6\u6ce8\u610f\u5403\u6389\u6362\u884c\u7b26 \u6570\u636e\u7c7b\u578b \u683c\u5f0f\u7b26* \u6570\u636e\u7c7b\u578b \u683c\u5f0f\u7b26* int %d long long %lld unsigned long long %llu char %c \u5b57\u7b26\u6570\u7ec4 %s float %f double %lf *\u8fd9\u91cc\u4e3a\u4e86\u770b\u7740\u65b9\u4fbf\u52a0\u4e0a\u4e86% 1 2 3 4 5 6 7 8 9 10 int a ; long long b ; char c ; double d = 1.0 ; float f = 2.7 ; scanf ( \"%d%lld\" , & a , & b ); scanf ( \"%c\" , & c ); //\u7a7a\u683c\uff0c\u56de\u8f66\uff0c\u7f29\u8fdb\u90fd\u4f1a\u88ab\u8bfb\u5165\uff0c\u6ce8\u610f\uff01 printf ( \"%d%d\" , a , c ); //c\u88ab\u8f6c\u6362\u6210int\u7c7b\u578b printf ( \"ans = %f %.12lf \\n \" , f , d ); \u53cd\u4f8b\uff1a\u521d\u5b66\u8005\u5e38\u72af\u7684\u9519\u8bef \u00b6 1 2 3 4 5 6 7 8 9 10 int mian () { int a , b ; c , d = 1 ; bool flag1 = ture , flag2 = flase ; scanf ( \"%d\" , a ); printf ( \"%d, b\" ); c = b + 1 e = 2 ab ; return 1 ; }","title":"\u57fa\u672c\u8bed\u6cd5"},{"location":"c-basic/grammar/#_1","text":"C\u8bed\u8a00\u4e66\u5199\u683c\u5f0f\u662f\u81ea\u7531\u7684\uff0c\u6bcf\u884c\u53ef\u4ee5\u5199\u591a\u4e2a\u8bed\u53e5\uff0c\u53ef\u4ee5\u5199\u591a\u884c\u3002 \u4e00\u4e2aC\u8bed\u8a00\u7a0b\u5e8f\u6709\u4e14\u53ea\u6709\u4e00\u4e2amain\u51fd\u6570\uff0c\u662f\u7a0b\u5e8f\u8fd0\u884c\u7684\u8d77\u70b9\u3002 \u6bcf\u4e2aC\u8bed\u8a00\u7a0b\u5e8f\u5199\u5b8c\u540e\uff0c\u90fd\u662f\u5148\u7f16\u8bd1\uff0c\u540e\u94fe\u63a5\uff0c\u6700\u540e\u8fd0\u884c\u3002\uff08.c->.obj->.exe\uff09\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u6ce8\u610f.c\u548c.obj\u6587\u4ef6\u65f6\u65e0\u6cd5\u8fd0\u884c\u7684\uff0c\u53ea\u6709.exe\u6587\u4ef6\u624d\u53ef\u4ee5\u8fd0\u884c\u3002 C\u9762\u5411\u8fc7\u7a0b\uff0cC++\u3001java\u9762\u5411\u5bf9\u8c61\u3002","title":"\u7406\u8bba\u77e5\u8bc6"},{"location":"c-basic/grammar/#_2","text":"\u5408\u6cd5\u7684\u8981\u6c42\u662f\u7531\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u4e0b\u5212\u7ebf\u7ec4\u6210\uff0c\u5e76\u4e14\u7b2c\u4e00\u4e2a\u5fc5\u987b\u4e3a\u5b57\u6bcd\u6216\u662f\u4e0b\u5212\u7ebf\u3002 \u5173\u952e\u5b57\u4e0d\u53ef\u4ee5\u4f5c\u4e3a\u7528\u6237\u6807\u8bc6\u7b26\u53f7\u3002 main define scanf printf include If \u90fd\u4e0d\u662f\u5173\u952e\u5b57\u3002 \u9a7c\u5cf0\u547d\u540d\u6cd5","title":"\u6807\u8bc6\u7b26"},{"location":"c-basic/grammar/#_3","text":"\u6570\u636e\u7c7b\u578b \u5b9a\u4e49\u6807\u8bc6\u7b26 \u5360\u5b57\u8282\u6570 \u6570\u503c\u8303\u56f4 \u77ed\u6574\u578b short 2 -2 15 ~2 15 -1 (32767) \u6574\u578b int 4 -2 31 ~2 31 -1(\u7ea62\u00d710 9 ) \u8d85\u957f\u6574\u578b long long 8 -2 63 ~2 63 -1(\u7ea69\u00d710 18 ) \u65e0\u7b26\u53f7\u6574\u578b unsigned int 4 0~2 32 -1(\u7ea64\u00d710 9 ) \u5176\u4f59\u65e0\u7b26\u53f7\u7c7b\u578b\u540c\u7406","title":"\u6574\u6570"},{"location":"c-basic/grammar/#_4","text":"\u6570\u636e\u7c7b\u578b \u5b9a\u4e49\u6807\u8bc6\u7b26 \u6570\u503c\u8303\u56f4 \u5360\u5b57\u8282\u6570 \u6709\u6548\u4f4d\u6570 \u5355\u7cbe\u5ea6\u5b9e\u578b float -3.4\u00d710 38 ~3.4\u00d710 38 4 6~7\u4f4d \u53cc\u7cbe\u5ea6\u5b9e\u578b double -1.7\u00d710 308 ~1.7\u00d710 308 8 15~16\u4f4d \u5e03\u5c14\u578b bool true \u6216 false 1","title":"\u5b9e\u6570"},{"location":"c-basic/grammar/#_5","text":"\u4e24\u4e2a\u6574\u6570\u76f8\u9664\u7ed3\u679c\u8fd8\u662f\u6574\u6570\uff0c 5/2 \u7684\u503c\u4e3a2\u800c\u4e0d\u662f2.5 \u89e3\u51b3\u65b9\u6cd5\uff1a\u81f3\u5c11\u4e00\u4e2a\u6570\u8f6c\u6362\u6210\u6d6e\u70b9\u6570\uff0c\u5982 5/2.0 (float)a/b \u9664\u4ee50\u4f1a\u8fd4\u56de NaN","title":"\u5168\u6574\u6570\u9664\u6cd5"},{"location":"c-basic/grammar/#_6","text":"\u5b9a\u4e49\u6807\u8bc6\u7b26 \u5360\u5b57\u8282\u6570 \u6570\u503c\u8303\u56f4 char 1 -128~127 \u76f4\u63a5\u8868\u793a char c = 'A'; ASCII\u7801\u8868\u793a char ch = 65; \u8f6c\u4e49\u5b57\u7b26 \u6362\u884c\u7b26 '\\n' \u5355\u5f15\u53f7 '\\'' \u53cd\u659c\u6760 '\\\\' \u5b57\u7b26\u578b\u4e5f\u53ef\u4ee5\u505a\u52a0\u51cf\u8fd0\u7b97","title":"\u5b57\u7b26\u578b"},{"location":"c-basic/grammar/#_7","text":"\u8fd0\u7b97\u7b26\u7c7b\u578b \u5e38\u7528\u8fd0\u7b97\u7b26 \u793a\u4f8b \u7b97\u672f\u8fd0\u7b97\u7b26 + - * / % ++ -- 5 % 2 \u5173\u7cfb\u8fd0\u7b97\u7b26 > < == >= <= != a == 1 \u903b\u8f91\u8fd0\u7b97\u7b26 && || ! a>0 && a<b \u4f4d\u64cd\u4f5c\u8fd0\u7b97\u7b26 & | ~ ^ << >> 1<<2 \u8d4b\u503c\u8fd0\u7b97\u7b26 = += &= <<= a += 2 \u6761\u4ef6\u8fd0\u7b97\u7b26 ? : a == 1 ? 1 : 0 \u6307\u9488\u8fd0\u7b97\u7b26 * & *it","title":"\u8fd0\u7b97\u7b26\u548c\u8868\u8fbe\u5f0f"},{"location":"c-basic/grammar/#_8","text":"\u683c\u5f0f\uff1a \u2003\u2003 \u53d8\u91cf = \u8868\u8fbe\u5f0f; \u610f\u4e49\uff1a \u2003\u2003\u5c06\u53f3\u8fb9\u8868\u8fbe\u5f0f\u7684\u503c\u8d4b\u7ed9\u5de6\u8fb9\u7684\u53d8\u91cf \u4e00\u5b9a\u8981\u533a\u5206 = \u548c \u7b49\u4e8e\uff0c C\u8bed\u8a00\u4e2d\u5224\u65ad\u76f8\u7b49\u7528 == \u8fd0\u7b97\u7b26 1 2 if ( a = 1 ) //\u00d7 while ( a = 1 ) //\u00d7 \u5728\u8fdb\u884c\u8d4b\u503c\u8fd0\u7b97\u65f6\uff0c\u5982\u679c\u8d4b\u503c\u8fd0\u7b97\u7b26\u4e24\u8fb9\u7684\u6570\u636e\u7c7b\u578b\u4e0d\u540c\uff0c\u7cfb\u7edf\u5c06\u4f1a\u81ea\u52a8\u8fdb\u884c\u7c7b\u578b\u8f6c\u6362\uff0c\u5373\u5c06\u8d4b\u503c\u8fd0\u7b97\u7b26\u53f3\u8fb9\u7684\u6570\u636e\u7c7b\u578b\u8f6c\u6362\u6210\u5de6\u8fb9\u7684\u53d8\u91cf\u7c7b\u578b\u3002\u53ef\u80fd\u4f1a\u51fa\u73b0\u6570\u636e\u4e22\u5931\u3002","title":"\u8d4b\u503c\u8bed\u53e5"},{"location":"c-basic/grammar/#_9","text":"","title":"\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7"},{"location":"c-basic/grammar/#_10","text":"1 2 3 4 5 6 7 8 9 10 int a = 21 ; int c ; // a \u7684\u503c\u5728\u8d4b\u503c\u4e4b\u524d\u4e0d\u4f1a\u81ea\u589e c = a ++ ; // c = 21 a = 22 // a \u7684\u503c\u5728\u8d4b\u503c\u4e4b\u524d\u81ea\u589e c = ++ a ; // c = 23 a = 23","title":"\u81ea\u589e\u8868\u8fbe\u5f0f"},{"location":"c-basic/grammar/#_11","text":"\u8fd0\u7b97\u7b26 \u540d\u79f0 \u4f5c\u7528 & \u4e0e \u4e24\u4e2a\u4f4d\u90fd\u4e3a1\u65f6\uff0c\u7ed3\u679c\u624d\u4e3a1 | \u6216 \u4e24\u4e2a\u4f4d\u90fd\u4e3a0\u65f6\uff0c\u7ed3\u679c\u624d\u4e3a0 ^ \u5f02\u6216 \u4e24\u4e2a\u4f4d\u76f8\u540c\u4e3a0\uff0c\u76f8\u5f02\u4e3a1 ~ \u53d6\u53cd 0\u53d81\uff0c1\u53d80 << \u5de6\u79fb \u5404\u4e8c\u8fdb\u4f4d\u5168\u90e8\u5de6\u79fb\u82e5\u5e72\u4f4d\uff0c\u9ad8\u4f4d\u4e22\u5f03\uff0c\u4f4e\u4f4d\u88650 >> \u53f3\u79fb \u5404\u4e8c\u8fdb\u4f4d\u5168\u90e8\u53f3\u79fb\u82e5\u5e72\u4f4d\uff0c\u5bf9\u65e0\u7b26\u53f7\u6570\uff0c\u9ad8\u4f4d\u88650\uff0c\u6709\u7b26\u53f7\u6570 \u533a\u5206 | \u548c || \uff0c & \u548c &&","title":"\u4f4d\u8fd0\u7b97"},{"location":"c-basic/grammar/#_12","text":"\u5934\u6587\u4ef6\uff1a <stdio.h> \u8f93\u5165\u51fd\u6570\uff1a scanf(\"%\u5bf9\u5e94\u683c\u5f0f\u5b57\u7b26\", &\u53d8\u91cf\u540d); \u8f93\u51fa\u51fd\u6570: printf(\"\u5176\u4ed6\u5b57\u7b26 %\u5bf9\u5e94\u683c\u5f0f\u5b57\u7b26 \u5176\u4ed6\u5b57\u7b26\", \u53d8\u91cf\u540d); \u4e00\u5b9a\u4e0d\u8981\u5fd8\u8bb0 scanf \u51fd\u6570\u4e2d\u7684& \u5b57\u7b26\u7c7b\u578b\u53d8\u91cf\u540d = getchar(); \u4f7f\u7528\u65f6\u6ce8\u610f\u5403\u6389\u6362\u884c\u7b26 \u6570\u636e\u7c7b\u578b \u683c\u5f0f\u7b26* \u6570\u636e\u7c7b\u578b \u683c\u5f0f\u7b26* int %d long long %lld unsigned long long %llu char %c \u5b57\u7b26\u6570\u7ec4 %s float %f double %lf *\u8fd9\u91cc\u4e3a\u4e86\u770b\u7740\u65b9\u4fbf\u52a0\u4e0a\u4e86% 1 2 3 4 5 6 7 8 9 10 int a ; long long b ; char c ; double d = 1.0 ; float f = 2.7 ; scanf ( \"%d%lld\" , & a , & b ); scanf ( \"%c\" , & c ); //\u7a7a\u683c\uff0c\u56de\u8f66\uff0c\u7f29\u8fdb\u90fd\u4f1a\u88ab\u8bfb\u5165\uff0c\u6ce8\u610f\uff01 printf ( \"%d%d\" , a , c ); //c\u88ab\u8f6c\u6362\u6210int\u7c7b\u578b printf ( \"ans = %f %.12lf \\n \" , f , d );","title":"\u6807\u51c6\u8f93\u5165\u8f93\u51fa"},{"location":"c-basic/grammar/#_13","text":"1 2 3 4 5 6 7 8 9 10 int mian () { int a , b ; c , d = 1 ; bool flag1 = ture , flag2 = flase ; scanf ( \"%d\" , a ); printf ( \"%d, b\" ); c = b + 1 e = 2 ab ; return 1 ; }","title":"\u53cd\u4f8b\uff1a\u521d\u5b66\u8005\u5e38\u72af\u7684\u9519\u8bef"},{"location":"c-basic/structure/","text":"\u7a0b\u5e8f\u8bbe\u8ba1\u57fa\u672c\u601d\u8def \u00b6 \u8f93\u5165 \u2192 \u8ba1\u7b97\u5904\u7406 \u2192 \u8f93\u51fa \u57fa\u672c\u7ed3\u6784 \u00b6 1 2 3 4 5 6 7 #include <stdio.h> // \u5934\u6587\u4ef6 int main () // \u4e3b\u51fd\u6570 { printf ( \"Hello, world!\" ); // \u8c03\u7528 printf \u51fd\u6570 return 0 ; // \u8fd4\u56de0\uff0c\u4e3b\u51fd\u6570\u4e0d\u80fd\u8fd4\u56de\u5176\u4ed6\u503c } \u987a\u5e8f\u7ed3\u6784 \u00b6 \u9009\u62e9\u7ed3\u6784 \u00b6 if \u00b6 1 2 3 4 5 6 7 8 9 10 if ( \u6761\u4ef6\u8868\u8fbe\u5f0f ) { \u8bed\u53e5 1 ; \u8bed\u53e5 2 ; } else if ( \u6761\u4ef6\u8868\u8fbe\u5f0f ) { \u8bed\u53e5 3 ; } else { \u8bed\u53e5 4 ; } switch \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 switch ( \u8868\u8fbe\u5f0f ) { case \u5e38\u91cf\u8868\u8fbe\u5f0f 1 \uff1a \u8bed\u53e5 1 \uff1b break ; case \u5e38\u91cf\u8868\u8fbe\u5f0f 2 \uff1a \u8bed\u53e5 2 \uff1b \u8bed\u53e5 3 \uff1b break ; ... default : //\u53ef\u7701\u7565 \u8bed\u53e5 n \uff1b } * \u4e0d\u8981\u5fd8\u8bb0 break \u548c\u6bcf\u79cd\u60c5\u51b5\u540e\u7684 : * switch \u8bed\u53e5\u7684\u5bf9\u8c61\u53ea\u80fd\u662f int char bool \u7c7b\u578b\u7684\u6570\u636e \u5faa\u73af\u7ed3\u6784 \u00b6 for \u00b6 1 2 3 for ( init ; condition ; increment ) { statement ( s ); } while \u00b6 1 2 3 while ( condition ) { statement ( s ); } do-while \u00b6 1 2 3 do { statement ( s ); // \u8bed\u53e5\u81f3\u5c11\u4f1a\u88ab\u6267\u884c\u4e00\u6b21 } while ( condition ); \u5d4c\u5957\u5faa\u73af \u00b6 \u6b7b\u5faa\u73af \u00b6","title":"\u903b\u8f91\u7ed3\u6784"},{"location":"c-basic/structure/#_1","text":"\u8f93\u5165 \u2192 \u8ba1\u7b97\u5904\u7406 \u2192 \u8f93\u51fa","title":"\u7a0b\u5e8f\u8bbe\u8ba1\u57fa\u672c\u601d\u8def"},{"location":"c-basic/structure/#_2","text":"1 2 3 4 5 6 7 #include <stdio.h> // \u5934\u6587\u4ef6 int main () // \u4e3b\u51fd\u6570 { printf ( \"Hello, world!\" ); // \u8c03\u7528 printf \u51fd\u6570 return 0 ; // \u8fd4\u56de0\uff0c\u4e3b\u51fd\u6570\u4e0d\u80fd\u8fd4\u56de\u5176\u4ed6\u503c }","title":"\u57fa\u672c\u7ed3\u6784"},{"location":"c-basic/structure/#_3","text":"","title":"\u987a\u5e8f\u7ed3\u6784"},{"location":"c-basic/structure/#_4","text":"","title":"\u9009\u62e9\u7ed3\u6784"},{"location":"c-basic/structure/#if","text":"1 2 3 4 5 6 7 8 9 10 if ( \u6761\u4ef6\u8868\u8fbe\u5f0f ) { \u8bed\u53e5 1 ; \u8bed\u53e5 2 ; } else if ( \u6761\u4ef6\u8868\u8fbe\u5f0f ) { \u8bed\u53e5 3 ; } else { \u8bed\u53e5 4 ; }","title":"if"},{"location":"c-basic/structure/#switch","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 switch ( \u8868\u8fbe\u5f0f ) { case \u5e38\u91cf\u8868\u8fbe\u5f0f 1 \uff1a \u8bed\u53e5 1 \uff1b break ; case \u5e38\u91cf\u8868\u8fbe\u5f0f 2 \uff1a \u8bed\u53e5 2 \uff1b \u8bed\u53e5 3 \uff1b break ; ... default : //\u53ef\u7701\u7565 \u8bed\u53e5 n \uff1b } * \u4e0d\u8981\u5fd8\u8bb0 break \u548c\u6bcf\u79cd\u60c5\u51b5\u540e\u7684 : * switch \u8bed\u53e5\u7684\u5bf9\u8c61\u53ea\u80fd\u662f int char bool \u7c7b\u578b\u7684\u6570\u636e","title":"switch"},{"location":"c-basic/structure/#_5","text":"","title":"\u5faa\u73af\u7ed3\u6784"},{"location":"c-basic/structure/#for","text":"1 2 3 for ( init ; condition ; increment ) { statement ( s ); }","title":"for"},{"location":"c-basic/structure/#while","text":"1 2 3 while ( condition ) { statement ( s ); }","title":"while"},{"location":"c-basic/structure/#do-while","text":"1 2 3 do { statement ( s ); // \u8bed\u53e5\u81f3\u5c11\u4f1a\u88ab\u6267\u884c\u4e00\u6b21 } while ( condition );","title":"do-while"},{"location":"c-basic/structure/#_6","text":"","title":"\u5d4c\u5957\u5faa\u73af"},{"location":"c-basic/structure/#_7","text":"","title":"\u6b7b\u5faa\u73af"}]}